/**
 * Triplsesense Yeoman Project Generator
 * 
 * Easy to use generator to set up frontend projects.
 * 
 * @author     Jan Lengowski <j.lengowski@triplesense.de>
 * @copyright  triplesense GmbH 2014 <www.triplesense.de>
 */
(function(m) {
	
	"use strict";
	
	var util = require("util")
	  , path = require("path")
	  , yeoman = require("yeoman-generator")
	  , underscore = require("underscore.string"); 
	
	/**
	 * Generator class, inherits from yeoman.generators.Base.
	 * 
	 * @author     Jan Lengowski <j.lengowski@triplesense.de>
	 * @copyright  triplesense GmbH 2014 <www.triplesense.de>
	 * 
 	 * @param {Object} args
 	 * @param {Object} options
   * @param {Object} config
	 */
	function TriplesenseGenerator(args, options, config) {
		
		// self reference for use in closures
		var self = this;
					
		// Apply Base constructur
		yeoman.generators.Base.apply(self, arguments);
		
		// define end event		
    this.on("end", function () {
        this.installDependencies({
            skipInstall: options["skip-install"],
            callback: function() {
                console.log(self.readFileAsString(path.join(__dirname, "templates", "all_installed.txt")));
            }
        });
    });
		
		this.pkg = JSON.parse(this.readFileAsString(path.join(__dirname, "../package.json")));
		
	}
	
	// TriplesenseGenerator inherits from <yeoman.generators.Base>
	util.inherits(TriplesenseGenerator, yeoman.generators.Base);
	
	// Expose the TriplesenseGenerator to the Module
	m.exports = TriplesenseGenerator;
	
	/**
	 * Inquiry method "askFor" which collects the user input
	 * 
	 * @return     void
	 * @access     public
	 * 
	 * @author     Jan Lengowski <j.lengowski@triplesense.de>
	 * @copyright  triplesense GmbH 2014 <www.triplesense.de>
	 */
	TriplesenseGenerator.prototype.askFor = function() {
		
		// Self reference and asyncronous callback.
		var self = this, cb = this.async();
				
		// Convert project name to valid directory identifier.
		function projectId(answers) { return underscore.slugify(answers.projectName); }
		
		// Lists for the user prompt.
		var lists = {
			css : [ "none", "Bootstrap", "Foundation" ] ,
			 js : [ "none", "jQuery", "Prototype" ]
		};
		
		// Ask user for input on the project options
		this.prompt([
			{ type: "input", name: "projectName", message: "Project name" } ,
			{ type: "input", name: "projectId"  , message: "Project ID", "default": projectId } ,
			{ type: "input", name: "clientName" , message: "Client name"  } ,
			{ type: "list" , name: "css"        , message: "Choose CSS Framework", choices: lists.css } ,
			{ type: "list" , name: "js"         , message: "Choose JS Framework",  choices: lists.js }
		], function(answers) {
			
			// Save answers as object property => this.answers
			this.answers = answers;
			this.answers.version = "1.0.0";
			
			// Save every single answer as own object property. 
			// Seems to be required for the templating to work properly.
			Object.keys(this.answers).forEach(function(key) {
				self[key] = answers[key];
			});
			
			// Set destination root directory, this will be prepended for
			// the destination path for every copy and template operation.
			this.destinationRoot(this.projectId);
			
			// Finally fire the callback
			cb();
			
		});
			
	};
	
	/**
	 * Set up the project directory structure and copy the project files.
	 * 
	 * @return     void
	 * @access     public
	 * 
	 * @author    Jan Lengowski <j.lengowski@triplesense.de>
	 * @copyright triplesense GmbH 2014 <www.triplesense.de>
	 */
	TriplesenseGenerator.prototype.app = function() {
		
		var self = this, root = this.projectId; // self reference for use in closures
		
		 // Directories which will be created on project creation
		var directories = [
			"", // "" => ProjectID (destinationRoot will be prepended)
			"docs",
			"docs/src",
			"src",
			"src/img",
			"src/css",
			"src/scss",
			"src/js",
			"src/js/vender",
			"src/templates",
			"templates",
			"templates/includes"
		];				
			
		// create the required project directory structure (defined in directories)
    directories.forEach(function(dir) { 
   		self.mkdir(path.join(root, dir));	   	
    });
    
    // Templates which will be parsed and copied
    var templates = { 
			"docs/template.html": "docs/template.html"  ,
			"docs/src/index.md": "docs/src/index.md"   ,
			"project-config.json": "project-config.json" ,
			"src/templates/index.html": "src/templates/index.html" ,
			"src/templates/includes/footer.html": "src/templates/includes/footer.html" ,
			"src/templates/includes/header.html": "src/templates/includes/header.html" ,
			"_package.json" : "package.json" ,
			"_bower.json": "bower.json" ,
			"_Gruntfile.js": "Gruntfile.js",
			"editorconfig": ".editorconfig" ,
			"jshintrc": ".jshintrc" ,
			"src/js/vendor/modernizr.min.js" : "src/js/vendor/modernizr.min.js"
		};
		
		// Copy and parse the templates
		Object.keys(templates).forEach(function(src) {		
			self.template(src, templates[src]);
		});
			
	};
	
  /**
	 * Copy the required files for the chosen Framework (CSS/JS)
	 * 
	 * @return     void
	 * @access     public
	 * 
	 * @author    Jan Lengowski <j.lengowski@triplesense.de>
	 * @copyright triplesense GmbH 2014 <www.triplesense.de>
	 */
	TriplesenseGenerator.prototype.projectFiles = function() {
		
		// Lowercase identifiers for the chosen CSS/JS framework.
		var framework = {
			js : this.js.toLowerCase() ,
			css: this.css.toLowerCase() 
		};
		
		// User wants a JavaScript framework to be included.
		if ( framework.js !== "none" ) {
			
			var path = ["src/js/vendor/", framework.js, ".min.js"].join("");
			
			this.copy(path, path);
			
		}
		
		// User want a CSS Framework to be included.
		if ( framework.css !== "none" ) {
			
			var path = ["src/css/", framework.css, ".min.css"].join("");
			
			this.copy(path, path);
			
		}
		
	};
	
}(module));