/**
 * Defines all tasks used in <%= projectName %>
 * Execute by typing "grunt" into the console
 * @param  {Object} grunt The grunt.js namespace
 */
module.exports = function (grunt) {
    var projectConfig = grunt.file.readJSON('project-config.json');

    var bakeTasks = function(destinationFolder, section) {
        return {
            options: {
                section: section
            },
            files: [{
                expand:     true,
                cwd:        '<%%= settings.src %>/templates',
                src:        ['**/*.html', '!includes/**/*.html'],
                dest:       destinationFolder
            }]
        };
    };

    var copyTask = function(destinationFolder, excludeMinifiedScripts) {
        var jsPatterns = ['**/*'];
        if(excludeMinifiedScripts) {
            jsPatterns = jsPatterns.concat(projectConfig.build.scripts.map(function(script) {
                return "!" + script;
            }));
        }

        return {
            files: [{
                expand: true,
                cwd:    '<%%= settings.src %>/js',
                src:    jsPatterns,
                dest:   destinationFolder + '/js',
            },{
                expand: true,
                cwd:    '<%%= settings.src %>/img',
                src:    ['**/*'],
                dest:   destinationFolder + '/img',
            }]
        };
    }

    grunt.initConfig({
        // Settings
        pkg: grunt.file.readJSON('package.json'),
        settings: {
            src:        "src",
            build:      "build",
            dist:       "dist",
            title:      "<%= projectName %>",
            projectId:  "<%= projectId %>",
            copyright:  "<%= clientName %>",
            author:     "Triplesense Reply",
            changed:    grunt.template.today("yyyy-mm-dd HH:MM")
        },

       // Compress all JS files:
       uglify: {
            // Compress project files
            'project': {
                options: {
                    banner: '/**!\n* JS project files for \'<%%= settings.title %>\'\n*\n* @copyright:  <%%= settings.copyright %>\n* @author:     <%%= settings.author %>\n* @package:    <%%= pkg.name %>\n* @changed:    <%%= settings.changed %>\n*/\n\n',
                },
                files: {
                    '<%%= settings.dist %>/js/<%%= settings.projectId %>.min.js':
                        projectConfig.build.scripts.map(function(script) {
                            return "<%%= settings.src %>/js/" + script;
                        })
                }
            },

            // compress vendor scripts
            'vendor': {
                options: {
                    banner: '/**!\n* Libraries required for \'<%%= settings.title %>\'\n*\n* @changed:   <%%= settings.changed %>\n* @copyright: See comments below\n*/\n\n',
                    preserveComments: 'all',
                    mangle: false,
                    compress: false
                },
                files: {
                    '<%%= settings.dist %>/js/vendor/<%%= settings.projectId %>.vendor.min.js':
                        projectConfig.build.vendorScripts.map(function(script) {
                            if(typeof projectConfig.build.bower[script] === "undefined") {
                                return "<%%= settings.src %>/js/vendor/" + script;
                            }
                            // take script from bower, if it is a bower component
                            return "bower_components/" + projectConfig.build.bower[script];
                        })
                }
            }
        },

        compass: {
            options: {
                sassDir:        '<%%= settings.src %>/sass',
                imagesDir:      '<%%= settings.src %>/img',
                relativeAssets: true,
                noLineComments: true
            },
            build: {
                options: {
                    cssDir:         '<%%= settings.build %>/css',
                    environment:    'development',
                    outputStyle:    'nested'
                }
            },
            dist: {
                options: {
                    cssDir:         '<%%= settings.dist %>/css',
                    environment:    'production',
                    outputStyle:    'compressed'
                }
            }
        },

        markdown: {
            options: {
                template: 'docs/template.html',
                markdownOptions: {
                    gfm: true,
                    // highlight: 'manual'
                }
            },
            dist: {
                files: [{
                    expand:     true,
                    cwd:        'docs/src',
                    src:        '*.md',     // relative to cwd
                    dest:       'docs/dist',
                    ext:        '.html'
                }]
            }
        },

        connect: {
            build: {
                options: {
                    open:       true,
                    port:       9000,
                    hostname:   'localhost',
                    base:       '<%%= settings.build %>'
                }
            }
        },

        bake: {
            options: {
                content: 'project-config.json'
            },
            build:  bakeTasks('<%%= settings.build %>', 'build'),
            dist:   bakeTasks('<%%= settings.dist %>', 'dist')
        },

        copy: {
            build:  copyTask('<%%= settings.build %>'),
            dist:   copyTask('<%%= settings.dist %>', true),

            // Copy files from bower to its destination
            build_bower: {
                files: Object.keys(projectConfig.build.bower).map(function(key){
                    return {
                        src:    "bower_components/" + projectConfig.build.bower[key],
                        dest:   "<%%= settings.build %>/js/vendor/" + key
                }})
            }
        },

        imagemin: {
            dist: {
                options: {
                    optimizationLevel: 3
                },
                files: [{
                    expand: true,
                    cwd: '<%%= settings.dist %>/img/',
                    src: ['**/*.{png,jpg,gif}'],
                    dest: '<%%= settings.dist %>/img/'
                }]
            }
        },

        clean: {
            build:  ["<%%= settings.build %>"],
            dist:   ["<%%= settings.dist %>"]
        },

        watch: {
            options: {
                livereload: true,
            },
            compass: {
                files: ['<%%= settings.src %>/sass/**/*.scss'],
                tasks: ['compass:build']
            },
            markdown: {
                files: ['docs/src/*.md'],
                tasks: ['markdown']
            },
            bake: {
                files: ['<%%= settings.src %>/templates/**/*.html'],
                tasks: ['bake']
            },
            copy: {
                files: ['<%%= settings.src %>/{js,img}/**/*'],
                tasks: ['copy:build']
            }
        }
    });

    // Load the plugins
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-contrib-compass');
    grunt.loadNpmTasks('grunt-contrib-connect');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-imagemin');
    grunt.loadNpmTasks('grunt-markdown');
    grunt.loadNpmTasks('grunt-bake');


    // Tassks
    grunt.registerTask('default', [
        'build',
        'connect',
        'watch'
    ]);

    // local build (usually not required to be called manually)
    grunt.registerTask('build', [
        'clean:build',
        'copy:build',
        'copy:build_bower',
        'compass:build',
        'bake:build'
    ]);

    // final distribution task
    grunt.registerTask('dist', [
        'clean:dist',
        'copy:dist',
        'compass:dist',
        'bake:dist',
        'uglify:project',
        'uglify:vendor',
        'imagemin:dist'
    ]);

};
