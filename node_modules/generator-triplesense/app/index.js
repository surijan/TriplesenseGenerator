'use strict';
var util = require('util');
var path = require('path');
var yeoman = require('yeoman-generator');
var _s = require('underscore.string');

// var defaultBuilder = require(path.resolve(__dirname, 'ts', 'builder', 'default'));

var TriplesenseGenerator = module.exports = function TriplesenseGenerator(args, options, config) {
    yeoman.generators.Base.apply(this, arguments);
    var that = this;

    this.on('end', function () {
        this.installDependencies({
            skipInstall: options['skip-install'],
            callback: function() {
                console.log(that.readFileAsString(path.join(__dirname, 'templates', 'all_installed.txt')));
            }
        });
    });

    this.pkg = JSON.parse(this.readFileAsString(path.join(__dirname, '../package.json')));
    //this.pkg = JSON.parse(this.readFileAsString(path.join(__dirname, this.projectId, 'package.json')));
};

util.inherits(TriplesenseGenerator, yeoman.generators.Base);

TriplesenseGenerator.prototype.askFor = function askFor() {
    
    var cb   = this.async()
      , self = this;

    // have Yeoman greet the user.
    console.log(this.yeoman);

    // Prompt types - see: https://github.com/SBoudrias/Inquirer.js
    var prompts = [
        {
            type: 'input',
            name: 'projectName',
            message: 'Human readable project name'
        },
        {
            type: 'input',
            name: 'projectId',
            message: 'Short, lowercase project identifier',
            default: function(previousAnswers) {
                return _s.slugify(previousAnswers.projectName)
            }
        },
        {
            type: 'input',
            name: 'clientName',
            message: 'Name of the client'
        },
        {
        	type: 'list',
        	name: 'cssFramework',
        	message: 'Choose CSS Framework',
        	choices: [ 'None', 'Bootstrap', 'Foundation' ]
        },
        {
        	type: 'list',
        	name: 'jsFramework',
        	message: 'Choose JavaScript Framework',
        	choices: [ 'None', 'jQuery', 'Prototype' ]
        }
    ];

    this.prompt(prompts, function (props) {
    	
    	props.version = "0.0.2";
    	
    	Object.keys(props).forEach(function(key) {
    		self[key] = props[key];	
    	});
    	
    	this.destinationRoot(this.projectId);
    	        
        cb();
        
    }.bind(this));
};

TriplesenseGenerator.prototype.app = function app() {
    
    var self = this; // self reference for use in closures
        
    var directories = { // main directories and sub directories which will be created
    	'docs'  : [ 'src' ],
    	'src'	: [ 'img', 'css', 'scss', 'js', 'js/vendor', 'templates', 'templates/includes' ],
    	'media' : [ 'img', 'json' ]
    };
    
    // create the required project directory structure (defined in directories)
    Object.keys(directories).forEach(function(main) {
   		if ( Array.isArray( directories[ main ] ) ) {
   			directories[main].forEach(function(sub) {
   				self.mkdir([main, sub].join('/'));	   			
	   		});	
   		}   		
    });
	
	var templates = { // templates which will be parsed and copied
		'docs/template.html': 'docs/template.html'  ,
		'docs/src/index.md': 'docs/src/index.md'   ,
		'project-config.json': 'project-config.json' ,
		'src/templates/index.html': 'src/templates/index.html' ,
		'src/templates/includes/footer.html': 'src/templates/includes/footer.html' ,
		'src/templates/includes/header.html': 'src/templates/includes/header.html' ,
		'_package.json' : 'package.json' ,
		'_bower.json': 'bower.json' ,
		'_Gruntfile.js': 'Gruntfile.js'
	};
	
	// Copy and parse the templates
	Object.keys(templates).forEach(function(src) {		
		self.template(src, templates[src]);
	});
    
};

TriplesenseGenerator.prototype.projectfiles = function projectfiles() {
	
	var self = this; // self reference for closure use
	
	var files = { // static files which will be copied (src and target)
		'editorconfig'					 : '.editorconfig' ,
		'jshintrc'	  					 : '.jshintrc' ,
		'src/js/vendor/modernizr.min.js' : 'src/js/vendor/modernizr.min.js'
	};
	
	// JavaScript files depending on the chosen framework
	var jsFramework = this.jsFramework.toLowerCase();
	
	if ( jsFramework !== 'none' ) {
		
		var path = 'src/js/vendor/' + jsFramework + '.min.js';
		
		files[path] = path;
		
	}
	
	// CSS files depending on the chosen framework
	var cssFramework = this.cssFramework.toLowerCase();
	
	if ( cssFramework !== 'none' ) {
		
		var path = 'src/css/' + cssFramework + '.min.css';
		
		files[path] = path;
		
	}
	
	// Unit Testing Frameworks
	
		
	// Copy all files
	Object.keys(files).forEach(function(src) {
		self.copy(src, files[src]);
	});
	        
};